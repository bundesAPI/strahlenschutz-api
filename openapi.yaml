openapi: 3.0.0
info:
  title: ODL-Info API
  description: Daten zur radioaktiven Belastung in Deutschland. Weitere Informationen unter https://odlinfo.bfs.de/ODL/DE/service/datenschnittstelle/datenschnittstelle_node.html. 
  version: 1.0.0
servers:
  - url: https://www.imis.bfs.de/ogc/opendata/ows
components:
  schemas:
    NormalFeatureProperties:
      type: object
      description: Grundlegende Werte eines einzelnen Datenpunktes
      properties:
        id:
          type: string
          description: Internationale ID der Messstelle
          example: "DEZ2096"
        kenn:
          type: string
          description: Interne Messstellenkennung
          example: "066340191"
        plz:
          type: string
          description: PLZ der Messstelle
          example: "36280"
        name:
          type: string
          description: Name/Ortsname der Messstelle
          example: "Oberaula"
        start_measure:
          type: string
          format: date-time
          description: Startzeitpunkt der Messperiode für den gegebenen Messwert als ISO-Datetime
          example: "2021-11-30T20:00:00Z"
        end_measure:
          type: string
          format: date-time
          description: Endzeitpunkt der Messperiode für den gegebenen Messwert als ISO-Datetime
          example: "2021-11-30T21:00:00Z"
        value:
          type: number
          description: Der Messwert in `unit` (setzt sich aus `value_cosmic` und `value_terrestrial` zusammen)
          example: 0.124
        unit:
          type: string
          description: Einheit der Messwerte
          example: "µSv/h"
        validated:
          type: number
          enum: [1, 2]
          description: >
            Prüfstatus des Messwertes:
              * `1` - geprüft
              * `2` - ungeprüft
        nuclide:
          type: string
          description: Bezeichnung der Messgröße
          example: "Gamma-ODL-Brutto"
        duration:
          type: string
          enum: [1h, 1d]
          description: >
            Dauer der Messperiode
              * `1h` - eine Stunde
              * `1d` - ein Tag
    ExtendedFeatureProperties:
      type: object
      description: Erweiterte Werte eines einzelnen Datenpunktes
      allOf:
        - $ref: '#/components/schemas/NormalFeatureProperties'
      properties:
        site_status:
          type: number
          enum: [1, 2, 3]
          description: >
            Status der Messstelle:
              * `1` - In Betrieb
              * `2` - Defekt
              * `3` - Testbetrieb
        site_status_text:
          type: string
          description: Status der Messstelle als Text
          example: "in Betrieb"
        kid:
          type: number
          enum: [1, 2, 3, 4, 5, 6]
          description: >
            ID des Messnetzknotens, dem die Messstelle zugeordnet ist:
              * `1` - Freiburg
              * `2` - Berlin
              * `3` - München
              * `4` - Bonn
              * `5` - Salzgitter
              * `6` - Rendsburg
        height_above_sea:
          type: number
          description: Höhe der Messstelle über NN (Normal Null, Meereshöhe)
          example: 380
        value_cosmic:
          type: number
          description: Kosmischer Anteil in `unit`
          example: 0.047
        value_terrestrial:
          type: number
          description: Terrestrischer Anteil in `unit`
          example: 0.077
    GeometryPoint:
      type: object
      description: Koordinaten der Messstelle
      properties:
        type:
          type: string
          enum: [Point]
          description: Point-Feld, immer `Point`
        coordinates:
          type: array
          description: Koordinaten des Punkts (erster Wert Längengrad, zweiter Wert Breitengrad)
          minItems: 2
          maxItems: 2
          items:
            type: number
    BaseFeature:
      type: object
      description: Abstrakter Datenpunkt mit grundlegenden Werten. Entspricht einem `Feature` in GeoJSON.
      properties:
        type:
          type: string
          enum: [Feature]
          description: Feature-Feld, immer `Feature`
        id:
          type: string
          description: ID des Features, setzt sich zusammen aus dem Name des Layers und einer eindeutigen ID
          example: "odlinfo_odl_1h_latest.fid-764e3717_17d72ce7d3d_52d7"
        geometry:
          $ref: '#/components/schemas/GeometryPoint'
        geometry_name:
          type: string
          enum: [geom]
          description: Geometriename, immer `geom`
    NormalFeature:
      type: object
      description: Einzelner Datenpunkt, der nur über den normalen Umfang an Werten verfügt
      allOf:
        - $ref: '#/components/schemas/BaseFeature'
      properties:
        properties:
          $ref: '#/components/schemas/NormalFeatureProperties'
    ExtendedFeature:
      type: object
      description: Einzelner Datenpunkt, der nur über den erweiterten Umfang an Werten verfügt
      allOf:
        - $ref: '#/components/schemas/BaseFeature'
      properties:
        properties:
          $ref: '#/components/schemas/ExtendedFeatureProperties'
    BaseSchema:
      description: Abstraktes Standardschema der API. Diese Ebene entspricht einer `FeatureCollection` in GeoJSON.
      type: object
      properties:
        type:
          type: string
          enum: [FeatureCollection]
          description: FeatureCollection-Feld, immer `FeatureCollection`
        totalFeatures:
          type: number
          description: Anzahl der insgesamt gefundenen Datensätze
          example: 1722
        numberReturned:
          type: number
          description: Anzahl zurückgegebener Datensätze, also die Länge von `features`. Kleinergleich `totalFeatures`.
          example: 1000
        timeStamp:
          type: string
          format: date-time
          description: Zeitstempel der Antwort
          example: "2021-11-30T22:01:25.691Z"
    NormalSchema:
      description: Schema für Endpunkte, die den grundlegen Umfang an Messwerten pro Datenpunkt bereitstellen.
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseSchema'
      properties:
        features:
          type: array
          description: Liste einzelner Datensätze
          items:
            $ref: '#/components/schemas/NormalFeature'
    ExtendedSchema:
      description: Schema für Endpunkte, die den erweiterten Umfang an Messwerten pro Datenpunkt bereitstellen.
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseSchema'
      properties:
        features:
          type: array
          description: Liste einzelner Datensätze
          items:
            $ref: '#/components/schemas/ExtendedFeature'

paths:
  /:
    get:
      summary: Hauptendpunkt
      parameters:
        - in: query
          name: service
          required: true
          description: Name des Service der benutzt werden soll. Aktuell immer `WFS`.
          schema:
            type: string
            enum: [WFS]
        - in: query
          name: request
          required: true
          description: Name der OWS-Request. Aktuell immer `GetFeature`.
          schema:
            type: string
            enum: [GetFeature]
        - in: query
          name: typeName
          description: >
            Name des Datenlayers, das benutzt werden soll.
              * `odlinfo_odl_1h_latest` - Liste der Messstellen inklusive dem jeweils letzten 1-Stunden-Messwert
              * `odlinfo_timeseries_odl_1h` - Zeitreihe mit 1-Stunden-Messdaten
              * `odlinfo_timeseries_odl_24h` - Zeitreihe mit 24-Stunden-Messdaten
          schema:
            type: string
            enum: [opendata:odlinfo_odl_1h_latest, opendata:odlinfo_timeseries_odl_1h, opendata:odlinfo_timeseries_odl_24h]
        - in: query
          name: outputFormat
          required: true
          description: Ausgabeformat. Aktuell immer `application/json`.
          schema:
            type: string
            enum: [application/json]
        - in: query
          name: viewparams
          description: >
            Nur in Kombination mit historischen Daten (also nur Layer ohne `_latest`) relevant. 
            Genutzt zur Angabe einer spezifischen Messstelle mittels `kenn`-Wert.
          schema:
            type: string
            example: "kenn:031020004"
        - in: query
          name: sortBy
          description: >
            Hier kann ein Feld von `properties` (also den zurückgegebenen Datenpunkten) angegeben werden, dann wird nach diesem aufsteigend sortiert.
            Wird an den Namen des Feldes noch `+D` angehängt, so wird absteigend sortiert.
          schema:
            type: string
            example: "end_measure+D"
        - in: query
          name: maxFeatures
          description: Maximale Anzahl an Datenpunkten die zurückgegeben werden soll.
          schema:
            type: number
            example: 100
        - in: query
          name: startIndex
          description: Offset, von dem aus Datenpunkte zurückgegeben werden sollen. Kann in Kombination mit `maxFeatures` genutzt werden, um Pagination zu ermöglichen.
          schema:
            type: number

      responses:
        '200':
          description: Erfolgreicher Abruf - je nach Layer werden entweder grundlegende oder erweiterte Werte pro Datenpunkt zurückgegeben.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NormalSchema'
                  - $ref: '#/components/schemas/ExtendedSchema'
